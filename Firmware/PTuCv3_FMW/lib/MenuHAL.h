//;File: "MenuHAL.h"
//;Updated: "2010-09-02" "21:19"
//;Updated: "2011-01-04" "00:14"
//
#ifndef INCLUDE_MENUHAL
#define INCLUDE_MENUHAL

#include  "main.h"
#include  "Sets.h"

#define UC_DEG 0

//#define USE_MT_SUB

extern u08 v_LED3Buf[];

//; Меню. Версия 0.0
//; Предположим. Пусть существует три вида пунктов меню.
//#define MT_NUM 0  // Числовой параметр. Любое значение 16бит
//#define MT_LST 1  // Список Текстовый параметр. Например: "Влк."; "Откл."
//#define MT_SUB 2  // Подменю. Например: "Осн. настройки"; "Доп. настройки";

/** варианты пунктов меню #MenuType в структуре #Ctrl_t

*/
typedef enum {
  MT_UNUM8,   /**< Числовой параметр. Любое значение 8бит */
  MT_UNUM,    /**< Числовой параметр. Любое значение 16бит */
  MT_SNUM,    /**< Числовой параметр. Любое значение 16бит  */
//  MT_LST,     /**< Список Текстовый параметр. Например: "Влк."; "Откл." */
  MT_BUTTON,  /**< Кнопка;          */
  MT_SUB,     /**< Подменю. Например: "Осн. настройки"; "Доп. настройки"; */
//  MT_LST_RAM,  /**< Список Текстовый параметр. Например: "Влк."; "Откл." */
//  MT_STR  /**< Список Текстовый параметр. Например: "Влк."; "Откл." */
} eMENU_TYPE_t;

//; |0123456789012345|
//; +----------------+
//; |AGRIATIS PTCv1.0|
//; |                |
//; +----------------+
//
//; |0123456789012345|
//; +----------------+
//; | 85C  25C  2015г| Экран простоя
//; |18:00:00Вс 11Янв|
//; +----------------+


//; |0123456789012345|
//; +----------------+ Экран Установки времени
//; | Часы      2015г| Установка Часа
//; |18:00:00Вс 11Янв|
//; +----------------+

//; |0123456789012345|
//; +----------------+ Экран Установки времени
//; | Минуты    2015г| Установка Минут
//; |18:00:00Вс 11Янв|
//; +----------------+

//; |0123456789012345|
//; +----------------+ Экран Установки времени
//; | Секунды   2015г| Установка Секунд
//; |18:00:00Вс 11Янв|
//; +----------------+

//; |0123456789012345|
//; +----------------+ Экран Установки времени
//; | День      2015г| Установка Дня месяца
//; |18:00:00Вс 11Янв|
//; +----------------+

//; |0123456789012345|
//; +----------------+ Экран Установки времени
//; | Месяц     2015г| Установка Месяца
//; |18:00:00Вс 11Янв|
//; +----------------+

//; |0123456789012345|
//; +----------------+ Экран Установки времени
//; | Год       2015г| Установка Года
//; |18:00:00Вс 11Янв|
//; +----------------+

//; |0123456789012345|
//; +----------------+ Экран Установки времени
//; |Возврат    2015г| Отмена изменений и возврат
//; |18:00:00Вс 11Янв|
//; +----------------+

//; |0123456789012345|
//; +----------------+ Экран Установки времени
//; |Сохранить  2015г| Сохранить изменения
//; |18:00:00Вс 11Янв|
//; +----------------+

typedef enum {
  MSG_NOT,  //;
  MSG_DRAW, /**< Сообщение отрисовки меню */
  MSG_DRAWDATE, /**< Сообщение отрисовки меню даты */
  MSG_NEXT, /**< Сообщение перейти на следующий пункт меню  */
  MSG_PREV, /**< Сообщение перейти на предыдущий пункт меню */

  MSG_SWDN,  /**< Сообщение кнопка энкодера нажата. */
  MSG_SWUP,  /**< Сообщение выбора энкодера отпущена. */

  MSG_PARAM_INC,  /**< Сообщение увеличить значение параметра на 1. */
  MSG_PARAM_DEC,  /**< Сообщение уменьшить значение параметра на 1. */

  MSG_SELECT,     /**< Сообщение выбора текущего пункта меню. */
  MSG_RETURN,     /**< Сообщение возврат из подменю. */

} eMENU_MSG_t;






extern u08   v_InputLast;  //(-1; 0; +1) ; Что происходило с энкодером.
//extern uint16_t  v_InValInit;  //Начальное значени v_InputVal
//extern uint16_t  v_InVal    ;  //(-xx; 0; +xx) ; Число на которое нужно изменить параметр
extern u08   v_MenuReCnt;  //Количество отсчетов сделаных в одном направлении.


typedef struct {
  const u08 __flash  *pszItemMenu;  /**< Указатель на ASCIIZ строку, текст выводимого пункта меню */
//  u08   x_szItemMenu; /**<Координата x вывода текста пункта меню */
//  u08   y_szItemMenu; /**<Координата y вывода текста пункта меню */
  eMENU_TYPE_t MenuType; /**<Тип меню MT_NUM; MT_LST; MT_SUB; MT_BUTTON */
  //    ;   MT_NUM  ; Числовой параметр. Любое значение 16 бит
  //    ;   MT_LST  ; Список Текстовый параметр. Например: "Влк."; "Откл."
  //    ;   MT_SUB  ; Подменю. Например: "Осн. настройки"; "Доп. настройки";
  union uParam {
    u08  *u08Val;    /**<Указатель на параметр пункта меню (ячейка RAM 16bit) */
    u16  *u16Val;    /**<Указатель на параметр пункта меню (ячейка RAM 16bit) */
    s16  *s16Val;    /**<Указатель на параметр пункта меню (ячейка RAM 16bit) */
    Timer_t *pTimer;    /**<Указатель на параметр пункта меню  */
    u08 * const __flash *szStr;
  } pParam;
//  u08   x_ValParam;   /**< Координата x вывода значения параметра пункта меню */
//  u08   y_ValParam;   /**< Координата у вывода значения параметра пункта меню */
  union uExPrm1 {
    s16  s_Min;       /**< Минимальное значение параметра */
    u16  u_Min;       /**< Минимальное значение параметра */
    //    ; MT_NUM -> Минимальное значение параметра
    //    ; MT_SUB ->
    const u08 __flash *const __flash *ppszListItem; /**Указатель на указатели строк для списка MT_LST */
    u08 *const __flash * ppszListItem_RAM; /**Указатель на указатели строк для списка MT_LST */
    //    ; MT_LST ->
    u08 BtnDnTaskID;   /**< ID задачи обработки нажатия кнопки */
    u08 nTimer;   /**< Номер таймера */

  } ExPrm1;
  union uExPrm2 {
    s16 s_Max;        /**< Максимальное значение параметра  */
    u16 u_Max;        /**< Максимальное значение параметра  */
    //    ; MT_NUM ->
    u16 *hSubMenu;    /**< Указатель на подменю */
    //    ; MT_SUB -> SubMenuID. Идентификатор подменю.
    u08   nLst;
    //    ; MT_LST -> Число строк списка для выбора.
    u08 BtnUpTaskID;   /**< ID задачи обработки отпускания кнопки */\
  } ExPrm2;
  //  void (*pFuncMenu)(void) ;/**<Указатель на функцию которая обрабатывает данный пункт меню */
  u08 TaskID;         /**< ID задачи обработки меню */\
//  char   Unit;        /**< Единица измерения параметра */
} Ctrl_t;

typedef enum {
  IDLE,
  NORMAL,
  EDIT,
//  EXEDIT,
//  SAVE,
} eMODE_t;



typedef struct {
  const Ctrl_t __flash(*const __flash *hMenu)[];    //  Указатель на текущее меню
  u08 C_Indx;
  eMENU_MSG_t Msg   ;   //Сообщение для задачи обработки меню
  u08 TaskID;   //ID задачи обработки меню
  eMODE_t  vMode;/* Текущий режим работы. 0 - нормальный; 1 - программирование. */
  //  u08 LstItem:  5; /* Число записей для меню типа MT_LST*/
  //  /* Для других типов меню не используется */
  //
  //  u08 Type:     3; /* Число записей для меню типа MT_LST*/
  //  /* MT_NUM  Числовой параметр. Любое значение 16бит */
  //  /* MT_LST  Список Текстовый параметр. Например: "Влк."; "Откл." */
  //  /* MT_SUB  Подменю. Например: "Осн. настройки"; "Доп. настройки"; */
  //  u08 NextID;   //ID следующего пункта меню
  //  u08 PrevID;   //ID предыдущего пункта меню
  //  u08 CurID ;   //ID текущего пункта меню
  //
  //  u08 IDCurM;   //  Порядковый номер выбраного пункта текущего меню.
} Menu_t;


//{ Стек меню
u08 MenuSP;   //  Указатель стека для ID пунктов меню
struct sMenuStk {
  Ctrl_t**hMenu;
  u08 C_Indx;
} MenuStk[4];//  Стек для ID пунктов меню для возврата из подменю. Для меню типа MT_SUB
//} Стек меню


extern  Menu_t v_Menu;
extern  eMODE_t vMode;    /* Текущий режим работы. 0 - нормальный; 1 - программирование. */
extern u08 * const __flash Lst_nSets_Ram[];



void fMenuInit(void);

void fMenuSendMsg(eMENU_MSG_t Menu_Msg);

void fMenuDraw(void);
void fMenuNext(void);
void fMenuPrev(void);
void fMenuSelect(void);
void fMenuDefProc(void);
void fMenuParamIncDec(void);
void fMenuButtonProc(void);


/**


*/
void fMenuDrawTime(void);
void fMenuDefEditProc(void);


void fMenuSubDefProc(void);

void fMenuSubSelectProc(void);

const Ctrl_t __flash *fMenuGetHndCtrl(void);

void fMenuDrawCtrl(void);
void fMenuDraw_szItemMenu(const Ctrl_t __flash *pCtrl);

u08 fGetIncDecVal(u08 CntIncDec);
void fMenuIncDecTime(void);
void f_SetsAtTimePrint(u08 nTimer);

void fMenuProcTimer(void);


#endif // INCLUDE_MENUHAL

//;S_Alex
